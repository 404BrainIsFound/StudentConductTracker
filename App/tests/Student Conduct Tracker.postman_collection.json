{
	"info": {
		"_postman_id": "d48a97a9-08b0-4a57-babc-eb344ecb7119",
		"name": "Student Conduct Tracker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33307712",
		"_collection_link": "https://brain-is-found.postman.co/workspace/404BrainIsFound~5743c36a-170f-454b-8bb5-a91ef9b3ed70/collection/33307712-d48a97a9-08b0-4a57-babc-eb344ecb7119?action=share&source=collection_link&creator=33307712"
	},
	"item": [
		{
			"name": "Home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}",
					"host": [
						"{{host}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Administrator) Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login Successful\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.text()).to.include('admin_token');\r",
							"});\r",
							"\r",
							"// pm.test(\"Login Failed\", function() {\r",
							"//     pm.response.to.have.status(401);\r",
							"//     pm.expect(pm.response.text()).to.include('bad username or password given');\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"charles\",\r\n    \"password\": \"charlespass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Administrator) Create Student Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Identify test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(\r",
							"\t\tjsonData['message'].includes(\"added student\")\r",
							"\t).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "JWT {{access_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"studentID\": 109,\r\n    \"studentName\": \"Jeremy\",\r\n    \"degree\": \"BSc. Computer Science\",\r\n    \"department\": \"DCIT\",\r\n    \"faculty\": \"FST\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/students",
					"host": [
						"{{host}}"
					],
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Administrator) Create Student Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Identify test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(\r",
							"\t\tjsonData['message'].includes(\"student already exists\")\r",
							"\t).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "JWT {{access_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"studentID\": 2,\r\n    \"studentName\": \"Jane\",\r\n    \"degree\": \"Computer Science (Special)\",\r\n    \"department\": \"DCIT\",\r\n    \"faculty\": \"FST\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/students",
					"host": [
						"{{host}}"
					],
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returned Access Token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(\"staff_token\");\r",
							"    pm.environment.set('user_token', jsonData['staff_token']) \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"jean\",\r\n    \"password\": \"jeanpass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Search Students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"studentID\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"studentName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"\t\t\"department\":{\r",
							"\t\t\t\"type\":\"string\"\r",
							"\t\t},\r",
							"\t\t\"faculty\":{\r",
							"\t\t\t\"type\":\"string\"\r",
							"\t\t}\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"studentID\",\r",
							"        \"studentName\",\r",
							"\t\t\"department\",\r",
							"        \"faculty\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "JWT {{access_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"studentName\": \"Jane\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/students",
					"host": [
						"{{host}}"
					],
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) View Student Reviews Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"studentID\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"staffID\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"\t\t\"type\":{\r",
							"\t\t\t\"type\":\"string\"\r",
							"\t\t},\r",
							"\t\t\"content\":{\r",
							"\t\t\t\"type\":\"string\"\r",
							"\t\t}\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"studentID\",\r",
							"        \"staffID\",\r",
							"\t\t\"type\",\r",
							"        \"content\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"studentID\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/reviews",
					"host": [
						"{{host}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) View Student Reviews Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Identify test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(\r",
							"\t\tjsonData['message'].includes(\"student does not exist\")\r",
							"\t).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"studentID\": 79\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/reviews",
					"host": [
						"{{host}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Add Student Review Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 400 for missing fields\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        pm.expect(pm.response.json()).to.have.property('error', 'Missing required fields');\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 403 for unauthorized access\", function () {\r",
							"    if (pm.response.code === 403) {\r",
							"        pm.expect(pm.response.json()).to.have.property('error', 'Unauthorized access, teaching staff only');\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Identify test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(\r",
							"\t\tjsonData['message'].includes(\"Review added\")\r",
							"\t).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"studentID\": 1,\r\n    \"type\": \"Negative\",\r\n    \"content\": \"Slept in class\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/reviews",
					"host": [
						"{{host}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Staff) Add Student Review Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Identify test\", function () {\r",
							"\r",
							"\tlet jsonData = pm.response.json();\r",
							"\tpm.expect(\r",
							"\t\tjsonData['message'].includes(\"student does not exist\")\r",
							"\t).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"studentID\": 79,\r\n    \"type\": \"Negative\",\r\n    \"content\": \"Slept in class\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/reviews",
					"host": [
						"{{host}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://404brainisf-studentcond-r2uqsk3ah42.ws-us116.gitpod.io/"
		}
	]
}